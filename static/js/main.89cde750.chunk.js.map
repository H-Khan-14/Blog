{"version":3,"sources":["components/UserHeader.js","apis/jsonPlaceholder.js","actions/index.js","components/PostList.js","components/App.js","reducers/index.js","reducers/postsReducer.js","reducers/usersReducer.js","index.js"],"names":["UserHeader","user","this","props","className","name","React","Component","connect","state","ownProps","users","find","id","userId","axios","create","baseURL","fetchPosts","dispatch","a","jsonPlaceholder","get","response","type","payload","data","fetchUser","PostList","fetchPostsAndUsers","posts","map","post","key","title","body","renderList","getState","_","chain","uniq","forEach","Id","value","App","combineReducers","action","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","querySelector"],"mappings":"wOAGMA,E,iLACM,IACAC,EAASC,KAAKC,MAAdF,KAGR,OAAKA,EAIE,yBAAKG,UAAU,UAAUH,EAAKI,MAH5B,S,GANYC,IAAMC,WAiBhBC,eAJS,SAACC,EAAOC,GAC9B,MAAO,CAAET,KAAMQ,EAAME,MAAMC,MAAK,SAAAX,GAAI,OAAIA,EAAKY,KAAOH,EAASI,aAGhDN,CAAyBR,G,iDClBzBe,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAS,wCCgBEC,EAAa,yDAAM,WAAMC,GAAN,eAAAC,EAAA,sEACPC,EAAgBC,IAAI,UADb,OACxBC,EADwB,OAG9BJ,EAAS,CAAEK,KAAM,cAAeC,QAASF,EAASG,OAHpB,2CAAN,uDAwBbC,EAAY,SAAAd,GAAE,8CAAI,WAAMM,GAAN,eAAAC,EAAA,sEACNC,EAAgBC,IAAhB,iBAA8BT,IADxB,OACvBU,EADuB,OAG7BJ,EAAS,CAAEK,KAAM,aAAcC,QAASF,EAASG,OAHpB,2CAAJ,uDCtCrBE,E,4LAEF1B,KAAKC,MAAM0B,uB,mCAIX,OAAO3B,KAAKC,MAAM2B,MAAMC,KAAI,SAAAC,GAC1B,OACE,yBAAK5B,UAAU,OAAO6B,IAAKD,EAAKnB,IAC9B,uBAAGT,UAAU,mCACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,eACb,4BAAK4B,EAAKE,OACV,2BAAIF,EAAKG,OAEX,kBAAC,EAAD,CAAYrB,OAAQkB,EAAKlB,gB,+BAQjC,OAAO,yBAAKV,UAAU,2BAA2BF,KAAKkC,kB,GAvBnC9B,IAAMC,WA+BdC,eAJS,SAAAC,GACtB,MAAO,CAAEqB,MAAOrB,EAAMqB,SAGgB,CAAED,mBDjCR,yDAAM,WAAOV,EAAUkB,GAAjB,SAAAjB,EAAA,sEAChCD,EAASD,KADuB,OAEtCoB,IAAEC,MAAMF,IAAWP,OAChBC,IAAI,UACJS,OACAC,SAAQ,SAAAC,GAAE,OAAIvB,EAASQ,EAAUe,OACjCC,QANmC,2CAAN,0DCiCnBnC,CAAiDoB,GCzBjDgB,EARH,WACV,OACE,yBAAKxC,UAAU,gBACb,kBAAC,EAAD,Q,QCFSyC,cAAgB,CAG7Bf,MCPa,WAAyB,IAAxBrB,EAAuB,uDAAf,GAAIqC,EAAW,uCACrC,OAAQA,EAAOtB,MACb,IAAK,cACH,OAAOsB,EAAOrB,QAChB,QACE,OAAOhB,IDGXE,MERa,WAAyB,IAAxBF,EAAuB,uDAAf,GAAIqC,EAAW,uCACrC,OAAQA,EAAOtB,MACb,IAAK,aACH,MAAM,GAAN,mBAAWf,GAAX,CAAkBqC,EAAOrB,UAC3B,QACE,OAAOhB,MCIPsC,EAAQC,YAAYC,EAAUC,YAAgBC,MAEpDC,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,OAEFO,SAASC,cAAc,Y","file":"static/js/main.89cde750.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\n\nclass UserHeader extends React.Component {\n  render() {\n    const { user } = this.props;\n    //const user = this.props.users.find(user => user.id === this.props.userId); Old way to do this\n\n    if (!user) {\n      return null;\n    }\n\n    return <div className=\"header\">{user.name}</div>;\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return { user: state.users.find(user => user.id === ownProps.userId) };\n};\n\nexport default connect(mapStateToProps)(UserHeader);\n","import axios from 'axios';\n\nexport default axios.create({\n  baseURL: 'http://jsonplaceholder.typicode.com'\n});\n","import _ from 'lodash';\nimport jsonPlaceholder from '../apis/jsonPlaceholder';\n\nexport const fetchPostsAndUsers = () => async (dispatch, getState) => {\n  await dispatch(fetchPosts());\n  _.chain(getState().posts)\n    .map('userId')\n    .uniq()\n    .forEach(Id => dispatch(fetchUser(Id)))\n    .value();\n};\n\n// Original the above is compacted\n// export const fetchPostsAndUsers = () => async (dispatch, getState) => {\n//   await dispatch(fetchPosts());\n//   const userIds = _.uniq(_.map(getState().posts, 'userId'));\n//   userIds.forEach(Id => dispatch(fetchUser(Id)));\n// };\n\nexport const fetchPosts = () => async dispatch => {\n  const response = await jsonPlaceholder.get('/posts');\n\n  dispatch({ type: 'FETCH_POSTS', payload: response.data });\n};\n\n// original code before it was altered via memoization\n// export const fetchUser = id => async dispatch => {\n//   const response = await jsonPlaceholder.get(`/users/${id}`);\n\n//   dispatch({ type: 'FETCH_USER', payload: response.data });\n// };\n\n//code altered so we have a function that is not an action creator that we can then memoize\n// export const fetchUser = id => dispatch => {\n//   _fetchUser(id, dispatch);\n// };\n\n// const _fetchUser = _.memoize(async (id, dispatch) => {\n//   const response = await jsonPlaceholder.get(`/users/${id}`);\n\n//   dispatch({ type: 'FETCH_USER', payload: response.data });\n// });\n\nexport const fetchUser = id => async dispatch => {\n  const response = await jsonPlaceholder.get(`/users/${id}`);\n\n  dispatch({ type: 'FETCH_USER', payload: response.data });\n};\n","import React from 'react';\nimport UserHeader from './UserHeader';\nimport { connect } from 'react-redux';\nimport { fetchPostsAndUsers } from '../actions';\n\nclass PostList extends React.Component {\n  componentDidMount() {\n    this.props.fetchPostsAndUsers();\n  }\n\n  renderList() {\n    return this.props.posts.map(post => {\n      return (\n        <div className=\"item\" key={post.id}>\n          <i className=\"large middle aligned icon user\" />\n          <div className=\"content\">\n            <div className=\"description\">\n              <h2>{post.title}</h2>\n              <p>{post.body}</p>\n            </div>\n            <UserHeader userId={post.userId} />\n          </div>\n        </div>\n      );\n    });\n  }\n\n  render() {\n    return <div className=\"ui relaxed divided list\">{this.renderList()}</div>;\n  }\n}\n\nconst mapStateToProps = state => {\n  return { posts: state.posts };\n};\n\nexport default connect(mapStateToProps, { fetchPostsAndUsers })(PostList);\n","import React from 'react';\nimport PostList from './PostList';\n\nconst App = () => {\n  return (\n    <div className=\"ui container\">\n      <PostList />\n    </div>\n  );\n};\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport postReducers from './postsReducer';\nimport usersReducer from './usersReducer';\n\nexport default combineReducers({\n  /*dummyReducer: () => 14\n    'For beginners who do not yet know how to structure their reducers a dummy reducer works like this. It makes the error go away so you can continue working.'*/\n  posts: postReducers,\n  users: usersReducer,\n});\n","export default (state = [], action) => {\n  switch (action.type) {\n    case 'FETCH_POSTS':\n      return action.payload;\n    default:\n      return state;\n  }\n  /*if(action.type === 'FETCH_POSTS') {\n    return action.payload;\n  }\n  return state;*/\n};\n","export default (state = [], action) => {\n  switch (action.type) {\n    case 'FETCH_USER':\n      return [...state, action.payload];\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport App from './components/App';\nimport reducers from './reducers';\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector('#root')\n);\n"],"sourceRoot":""}